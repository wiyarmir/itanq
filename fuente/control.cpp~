/* 
 * File:   Control.cpp
 * Author: guillermo
 * 
 * Created on 5 de abril de 2009, 16:45
 */

#include "control.h"

Control::Control(SDL_Surface *p, Tanque* &j, Uint16 jx, Uint16 jy, Tanque* &e, Uint16 ex, Uint16 ey) {
    pantalla = p;
    for (int i = 0; i < nTecArr; i++) {
        arrTeclas[i] = false;
    }
#    ifdef DEB
    cout << "\tcontrolador>Creando Pincel" << endl;
#    endif
    pincel = new Dibujante(pantalla);
#    ifdef DEB
    cout << "\tcontrolador>Cargando Fondo" << endl;
#    endif
    fondo = IMG_Load("pantalla01.png");
#    ifdef DEB
    cout << "\tcontrolador>Creando jugador" << endl;
#    endif
    jugador = new Tanque(0, jx, jy, p);
    j = jugador;
#    ifdef DEB
    cout << "\tcontrolador>Creando enemigo" << endl;
#    endif
    enemigo = new Tanque(1, ex, ey, p);
    e = enemigo;
#    ifdef DEB
    cout << "\tcontrolador>Creando Bala (puntero vacio)" << endl;
#    endif
    bal = NULL;
}

Control::Control(const Control& orig) { }

Control::~Control() {
    SDL_FreeSurface(fondo);
#    ifdef DEB
    cout << "\tcontrolador>";
#    endif
    delete enemigo;
#    ifdef DEB
    cout << "\tcontrolador>";
#    endif
    delete jugador;
#    ifdef DEB
    cout << "\tcontrolador>";
#    endif
    delete pincel;
    if (bal != NULL) {
        delete bal;
    }
}

void Control::tecla_pulsada(SDLKey tecla) {
    switch (tecla) {
        case SDLK_UP:
            arrTeclas[0] = true;
            break;
        case SDLK_DOWN:
            arrTeclas[1] = true;
            break;
        case SDLK_LEFT:
            arrTeclas[2] = true;
            break;
        case SDLK_RIGHT:
            arrTeclas[3] = true;
            break;
        case SDLK_SPACE:
            arrTeclas[4] = true;
            break;
    }
}

void Control::tecla_libre(SDLKey tecla) {
    switch (tecla) {
        case SDLK_UP:
            arrTeclas[0] = false;
            break;
        case SDLK_DOWN:
            arrTeclas[1] = false;
            break;
        case SDLK_LEFT:
            arrTeclas[2] = false;
            break;
        case SDLK_RIGHT:
            arrTeclas[3] = false;
            break;
        case SDLK_SPACE:
            arrTeclas[4] = false;
            break;
    }
}

void Control::movimiento() {
    if (arrTeclas[0]) {
        jugador->mira_arr();
        if (!jugador->colision(enemigo) && jugador->dentro_tabl(ARR)) {
            jugador->ve_arr();
        }
    }
    if (arrTeclas[1]) {
        jugador->mira_aba();
        if (!jugador->colision(enemigo) && jugador->dentro_tabl(ABA)) {
            jugador->ve_aba();
        }
    }
    if (arrTeclas[2]) {
        jugador->mira_izq();
        if (!jugador->colision(enemigo) && jugador->dentro_tabl(IZQ)) {
            jugador->ve_izq();
        }
    }
    if (arrTeclas[3]) {
        jugador->mira_der();
        if (!jugador->colision(enemigo) && jugador->dentro_tabl(DER)) {
            jugador->ve_der();
        }
    }
    if (arrTeclas[4]) {
        if (bal == NULL) {
            bal = new Bala(jugador->diX() + 15, jugador->diY() + 15, pantalla, jugador->diOr());
        }
    }
    if (bal != NULL) {
        bal->mov();
    }
}

void Control::colisiones() {
    //cuando hay balas en juego
    if (bal != NULL) {
        //Enemigo y bala_jugador
        if (bal->colision(enemigo)) {
#            ifdef DEB
            cout << "control>Colision Bala-Enemigo" << endl;
#            endif
            delete bal;
            bal = NULL;
            enemigo->destruir();
        }
    }
    if (bal != NULL) {
        //Bala fuera de pantalla
        if (bal->diX() < 0 || bal->diX() > 800 || bal->diY() < 0 || bal->diY() > 600) {
            delete bal;
            bal = NULL;
        }

    }
    //Jugador y enemigo



}

void Control::pintadas() {
    pincel->dibujar(fondo);
    pincel->dibujar(jugador);
    if (bal != NULL) {
        pincel->dibujar(bal);
    }
    if (enemigo != NULL) {
        pincel->dibujar(enemigo);
    }
}
